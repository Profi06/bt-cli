// This code was autogenerated with `dbus-codegen-rust -s -g -m None -d org.bluez -p /org/bluez`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgBluezAgentManager1 {
    fn register_agent(&self, agent: dbus::Path, capability: &str) -> Result<(), dbus::Error>;
    fn unregister_agent(&self, agent: dbus::Path) -> Result<(), dbus::Error>;
    fn request_default_agent(&self, agent: dbus::Path) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgBluezAgentManager1 for blocking::Proxy<'a, C> {

    fn register_agent(&self, agent: dbus::Path, capability: &str) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.AgentManager1", "RegisterAgent", (agent, capability, ))
    }

    fn unregister_agent(&self, agent: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.AgentManager1", "UnregisterAgent", (agent, ))
    }

    fn request_default_agent(&self, agent: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.AgentManager1", "RequestDefaultAgent", (agent, ))
    }
}

pub trait OrgBluezProfileManager1 {
    fn register_profile(&self, profile: dbus::Path, uuid: &str, options: arg::PropMap) -> Result<(), dbus::Error>;
    fn unregister_profile(&self, profile: dbus::Path) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgBluezProfileManager1 for blocking::Proxy<'a, C> {

    fn register_profile(&self, profile: dbus::Path, uuid: &str, options: arg::PropMap) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.ProfileManager1", "RegisterProfile", (profile, uuid, options, ))
    }

    fn unregister_profile(&self, profile: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.ProfileManager1", "UnregisterProfile", (profile, ))
    }
}
