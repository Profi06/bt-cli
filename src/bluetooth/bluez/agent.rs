// This code was autogenerated with `dbus-codegen-rust -r`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgBluezAgent1 {
    fn release(&mut self) -> Result<(), dbus::MethodErr>;
    fn request_pin_code(&mut self, device: dbus::Path<'static>) -> Result<String, dbus::MethodErr>;
    fn display_pin_code(
        &mut self,
        device: dbus::Path<'static>,
        pincode: String,
    ) -> Result<(), dbus::MethodErr>;
    fn request_passkey(&mut self, device: dbus::Path<'static>) -> Result<u32, dbus::MethodErr>;
    fn display_passkey(
        &mut self,
        device: dbus::Path<'static>,
        passkey: u32,
        entered: u16,
    ) -> Result<(), dbus::MethodErr>;
    fn request_confirmation(
        &mut self,
        device: dbus::Path<'static>,
        passkey: u32,
    ) -> Result<(), dbus::MethodErr>;
    fn request_authoritation(&mut self, device: dbus::Path<'static>)
        -> Result<(), dbus::MethodErr>;
    fn authorize_service(
        &mut self,
        device: dbus::Path<'static>,
        uuid: String,
    ) -> Result<(), dbus::MethodErr>;
    fn cancel(&mut self) -> Result<(), dbus::MethodErr>;
}

pub fn register_org_bluez_agent1<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where
    T: OrgBluezAgent1 + Send + 'static,
{
    cr.register("org.bluez.Agent1", |b| {
        b.method("Release", (), (), |_, t: &mut T, ()| t.release());
        b.method(
            "RequestPinCode",
            ("device",),
            ("",),
            |_, t: &mut T, (device,)| t.request_pin_code(device).map(|x| (x,)),
        );
        b.method(
            "DisplayPinCode",
            ("device", "pincode"),
            (),
            |_, t: &mut T, (device, pincode)| t.display_pin_code(device, pincode),
        );
        b.method(
            "RequestPasskey",
            ("device",),
            ("",),
            |_, t: &mut T, (device,)| t.request_passkey(device).map(|x| (x,)),
        );
        b.method(
            "DisplayPasskey",
            ("device", "passkey", "entered"),
            (),
            |_, t: &mut T, (device, passkey, entered)| t.display_passkey(device, passkey, entered),
        );
        b.method(
            "RequestConfirmation",
            ("device", "passkey"),
            (),
            |_, t: &mut T, (device, passkey)| t.request_confirmation(device, passkey),
        );
        b.method(
            "RequestAuthoritation",
            ("device",),
            (),
            |_, t: &mut T, (device,)| t.request_authoritation(device),
        );
        b.method(
            "AuthorizeService",
            ("device", "uuid"),
            (),
            |_, t: &mut T, (device, uuid)| t.authorize_service(device, uuid),
        );
        b.method("Cancel", (), (), |_, t: &mut T, ()| t.cancel());
    })
}
