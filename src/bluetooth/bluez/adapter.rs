// This code was autogenerated with `dbus-codegen-rust -s -g -m None -d org.bluez -p /org/bluez/hci0`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgBluezAdapter1 {
    fn start_discovery(&self) -> Result<(), dbus::Error>;
    // fn set_discovery_filter(&self, properties: arg::PropMap) -> Result<(), dbus::Error>;
    fn stop_discovery(&self) -> Result<(), dbus::Error>;
    fn remove_device(&self, device: dbus::Path) -> Result<(), dbus::Error>;
    // fn get_discovery_filters(&self) -> Result<Vec<String>, dbus::Error>;
    // fn address(&self) -> Result<String, dbus::Error>;
    // fn address_type(&self) -> Result<String, dbus::Error>;
    // fn name(&self) -> Result<String, dbus::Error>;
    // fn alias(&self) -> Result<String, dbus::Error>;
    // fn set_alias(&self, value: String) -> Result<(), dbus::Error>;
    // fn class(&self) -> Result<u32, dbus::Error>;
    // fn powered(&self) -> Result<bool, dbus::Error>;
    // fn set_powered(&self, value: bool) -> Result<(), dbus::Error>;
    // fn power_state(&self) -> Result<String, dbus::Error>;
    // fn discoverable(&self) -> Result<bool, dbus::Error>;
    // fn set_discoverable(&self, value: bool) -> Result<(), dbus::Error>;
    // fn discoverable_timeout(&self) -> Result<u32, dbus::Error>;
    // fn set_discoverable_timeout(&self, value: u32) -> Result<(), dbus::Error>;
    // fn pairable(&self) -> Result<bool, dbus::Error>;
    // fn set_pairable(&self, value: bool) -> Result<(), dbus::Error>;
    // fn pairable_timeout(&self) -> Result<u32, dbus::Error>;
    // fn set_pairable_timeout(&self, value: u32) -> Result<(), dbus::Error>;
    // fn discovering(&self) -> Result<bool, dbus::Error>;
    // fn uuids(&self) -> Result<Vec<String>, dbus::Error>;
    // fn modalias(&self) -> Result<String, dbus::Error>;
    // fn roles(&self) -> Result<Vec<String>, dbus::Error>;
    // fn experimental_features(&self) -> Result<Vec<String>, dbus::Error>;
    // fn manufacturer(&self) -> Result<u16, dbus::Error>;
    // fn version(&self) -> Result<u8, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgBluezAdapter1
    for blocking::Proxy<'a, C>
{
    fn start_discovery(&self) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Adapter1", "StartDiscovery", ())
    }
/*
    fn set_discovery_filter(&self, properties: arg::PropMap) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Adapter1", "SetDiscoveryFilter", (properties,))
    }
*/
    fn stop_discovery(&self) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Adapter1", "StopDiscovery", ())
    }

    fn remove_device(&self, device: dbus::Path) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Adapter1", "RemoveDevice", (device,))
    }
/*
    fn get_discovery_filters(&self) -> Result<Vec<String>, dbus::Error> {
        self.method_call("org.bluez.Adapter1", "GetDiscoveryFilters", ())
            .and_then(|r: (Vec<String>,)| Ok(r.0))
    }

    fn address(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Address",
        )
    }

    fn address_type(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "AddressType",
        )
    }

    fn name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Name",
        )
    }

    fn alias(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Alias",
        )
    }

    fn class(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Class",
        )
    }

    fn powered(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Powered",
        )
    }

    fn power_state(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "PowerState",
        )
    }

    fn discoverable(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Discoverable",
        )
    }

    fn discoverable_timeout(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "DiscoverableTimeout",
        )
    }

    fn pairable(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Pairable",
        )
    }

    fn pairable_timeout(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "PairableTimeout",
        )
    }

    fn discovering(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Discovering",
        )
    }

    fn uuids(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "UUIDs",
        )
    }

    fn modalias(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Modalias",
        )
    }

    fn roles(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Roles",
        )
    }

    fn experimental_features(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "ExperimentalFeatures",
        )
    }

    fn manufacturer(&self) -> Result<u16, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Manufacturer",
        )
    }

    fn version(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Adapter1",
            "Version",
        )
    }

    fn set_alias(&self, value: String) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "Alias",
            value,
        )
    }

    fn set_powered(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "Powered",
            value,
        )
    }

    fn set_discoverable(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "Discoverable",
            value,
        )
    }

    fn set_discoverable_timeout(&self, value: u32) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "DiscoverableTimeout",
            value,
        )
    }

    fn set_pairable(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "Pairable",
            value,
        )
    }

    fn set_pairable_timeout(&self, value: u32) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Adapter1",
            "PairableTimeout",
            value,
        )
    } */
}
