// This code was autogenerated with `dbus-codegen-rust -s -g -m None -d org.bluez -p /org/bluez/hci0/dev_88_C9_E8_41_1A_CC`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgBluezDevice1 {
    fn disconnect(&self) -> Result<(), dbus::Error>;
    fn connect(&self) -> Result<(), dbus::Error>;
    // fn connect_profile(&self, uuid: &str) -> Result<(), dbus::Error>;
    // fn disconnect_profile(&self, uuid: &str) -> Result<(), dbus::Error>;
    fn pair(&self) -> Result<(), dbus::Error>;
    // fn cancel_pairing(&self) -> Result<(), dbus::Error>;
    // fn address(&self) -> Result<String, dbus::Error>;
    // fn address_type(&self) -> Result<String, dbus::Error>;
    // fn name(&self) -> Result<String, dbus::Error>;
    // fn alias(&self) -> Result<String, dbus::Error>;
    // fn set_alias(&self, value: String) -> Result<(), dbus::Error>;
    // fn class(&self) -> Result<u32, dbus::Error>;
    // fn appearance(&self) -> Result<u16, dbus::Error>;
    // fn icon(&self) -> Result<String, dbus::Error>;
    // fn paired(&self) -> Result<bool, dbus::Error>;
    // fn bonded(&self) -> Result<bool, dbus::Error>;
    // fn trusted(&self) -> Result<bool, dbus::Error>;
    // fn set_trusted(&self, value: bool) -> Result<(), dbus::Error>;
    // fn blocked(&self) -> Result<bool, dbus::Error>;
    // fn set_blocked(&self, value: bool) -> Result<(), dbus::Error>;
    // fn legacy_pairing(&self) -> Result<bool, dbus::Error>;
    // fn rssi(&self) -> Result<i16, dbus::Error>;
    // fn connected(&self) -> Result<bool, dbus::Error>;
    // fn uuids(&self) -> Result<Vec<String>, dbus::Error>;
    // fn modalias(&self) -> Result<String, dbus::Error>;
    fn adapter(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    // fn manufacturer_data(
    //     &self,
    // ) -> Result<
    //     ::std::collections::HashMap<u16, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    //     dbus::Error,
    // >;
    // fn service_data(&self) -> Result<arg::PropMap, dbus::Error>;
    // fn tx_power(&self) -> Result<i16, dbus::Error>;
    // fn services_resolved(&self) -> Result<bool, dbus::Error>;
    // fn wake_allowed(&self) -> Result<bool, dbus::Error>;
    // fn set_wake_allowed(&self, value: bool) -> Result<(), dbus::Error>;
    // fn sets(
    //     &self,
    // ) -> Result<::std::collections::HashMap<dbus::Path<'static>, arg::PropMap>, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgBluezDevice1
    for blocking::Proxy<'a, C>
{
    fn disconnect(&self) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Device1", "Disconnect", ())
    }

    fn connect(&self) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Device1", "Connect", ())
    }
    /*
        fn connect_profile(&self, uuid: &str) -> Result<(), dbus::Error> {
            self.method_call("org.bluez.Device1", "ConnectProfile", (uuid,))
        }

        fn disconnect_profile(&self, uuid: &str) -> Result<(), dbus::Error> {
            self.method_call("org.bluez.Device1", "DisconnectProfile", (uuid,))
        }
    */
    fn pair(&self) -> Result<(), dbus::Error> {
        self.method_call("org.bluez.Device1", "Pair", ())
    }
    /*
        fn cancel_pairing(&self) -> Result<(), dbus::Error> {
            self.method_call("org.bluez.Device1", "CancelPairing", ())
        }

        fn address(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Address",
            )
        }

        fn address_type(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "AddressType",
            )
        }

        fn name(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Name",
            )
        }

        fn alias(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Alias",
            )
        }

        fn class(&self) -> Result<u32, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Class",
            )
        }

        fn appearance(&self) -> Result<u16, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Appearance",
            )
        }

        fn icon(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Icon",
            )
        }

        fn paired(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Paired",
            )
        }

        fn bonded(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Bonded",
            )
        }

        fn trusted(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Trusted",
            )
        }

        fn blocked(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Blocked",
            )
        }

        fn legacy_pairing(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "LegacyPairing",
            )
        }

        fn rssi(&self) -> Result<i16, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "RSSI",
            )
        }

        fn connected(&self) -> Result<bool, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Connected",
            )
        }

        fn uuids(&self) -> Result<Vec<String>, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "UUIDs",
            )
        }

        fn modalias(&self) -> Result<String, dbus::Error> {
            <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
                self,
                "org.bluez.Device1",
                "Modalias",
            )
        }
    */
    fn adapter(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "Adapter",
        )
    }
    /*
    fn manufacturer_data(
        &self,
    ) -> Result<
        ::std::collections::HashMap<u16, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        dbus::Error,
    > {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "ManufacturerData",
        )
    }

    fn service_data(&self) -> Result<arg::PropMap, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "ServiceData",
        )
    }

    fn tx_power(&self) -> Result<i16, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "TxPower",
        )
    }

    fn services_resolved(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "ServicesResolved",
        )
    }

    fn wake_allowed(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "WakeAllowed",
        )
    }

    fn sets(
        &self,
    ) -> Result<::std::collections::HashMap<dbus::Path<'static>, arg::PropMap>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Device1",
            "Sets",
        )
    }

    fn set_alias(&self, value: String) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Device1",
            "Alias",
            value,
        )
    }

    fn set_trusted(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Device1",
            "Trusted",
            value,
        )
    }

    fn set_blocked(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Device1",
            "Blocked",
            value,
        )
    }

    fn set_wake_allowed(&self, value: bool) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(
            self,
            "org.bluez.Device1",
            "WakeAllowed",
            value,
        )
    } */
}
/*
pub trait OrgBluezMediaControl1 {
    fn connected(&self) -> Result<bool, dbus::Error>;
    fn player(&self) -> Result<dbus::Path<'static>, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgBluezMediaControl1
    for blocking::Proxy<'a, C>
{
    fn connected(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.MediaControl1",
            "Connected",
        )
    }

    fn player(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.MediaControl1",
            "Player",
        )
    }
}
/* */
pub trait OrgBluezBattery1 {
    fn percentage(&self) -> Result<u8, dbus::Error>;
    fn source(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgBluezBattery1
    for blocking::Proxy<'a, C>
{
    fn percentage(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Battery1",
            "Percentage",
        )
    }

    fn source(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            self,
            "org.bluez.Battery1",
            "Source",
        )
    }
} */
